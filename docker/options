#!/bin/bash
# Options parsing functions shared between docker script environments

# Parse the list of docker options passed
# (Use "$@" as passed parameter)
function parse_docker_options {
    uid=
    gid=
    while getopts ":i:g:" opt; do
        case ${opt} in
            i )
                uid=$OPTARG
                ;;
            g )
                gid=$OPTARG
                ;;
 
            \? )
                echo "Invalid option: $OPTARG" 1>&2
                ;;
            : )
                echo "Invalid option: $OPTARG requires an argument" 1>&2
                ;;
        esac
    done
    shift $((OPTIND -1))
    userargs=
    if [ ! -z ${uid} ]; then
        # Use a uid/gid to match the specified user account, and run as this user inside the container
        # This prevents issue with permissions when running inside vs outside a container
        groupadd -g ${gid} aesd
        echo "Adding user aesd with uid ${uid} gid ${gid}"
        userargs="--uid ${uid} --gid ${gid}"
    fi
    # Create an aesd user to run all tests as.  Yocto doesn't allow you to run builds as
    # the root user account and if we are running as non-root we want a user account with specified
    # matching uid/gid
    # then restart the script with this user account
    adduser ${userargs} --disabled-password --gecos '' aesd 
    adduser aesd sudo
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
    ln -s /var/aesd/.dl /home/aesd/.dl
    # This runs the rest of the script as the "aesd" user and exits with rc specified
    sudo -E -s -u aesd HOME=/home/aesd $0
    exit $?
}
